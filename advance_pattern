1)permuation and combination of string
public class advancerecursionprob {
    public  static void printperm(String str,String permutation){
        if(str.length()==0){
            System.out.println(permutation);
            return;
        }
        for(int i=0;i<str.length();i++){
            char currchar=str.charAt(i);
            String newstr=str.substring(0,i)+str.substring(i+1);
            printperm(newstr,permutation+currchar);
        }
    }
    public static void main(String[] args){
            String str="abc";
            printperm(str,"");
    }
}




2)
public class advancerecursionprob {
    public static int countpaths(int i , int j, int n,int m){

        if(i==n||j==m){
            return 0;
        }

        if(i==n-1 && j==m-1){
            return 1;
        }
        //count downwards
        int downpaths=countpaths(i+1,j,n,m);

        //count rightwards
        int rightpaths=countpaths(i,j+1,n,m);

        return  downpaths+rightpaths;
    }
        public static void main(String[] args){
        int n=3,m=3;
        int totalpaths=countpaths(0,0,n,m);
        System.out.println(totalpaths);
    }
}




3)place tiles of mxm
public class advancerecursionprob {
    public  static int placetiles(int n,int m){
        if(n<m){
            return 1;
        }
        if(n==m){
            return 2;
        }
        //vertically
        int verticle=placetiles(n-m,m);

        //horizontally
       int horizontal= placetiles(n-1,m);
         return verticle+horizontal;

    }

    public static void main(String[] args){
        int n=4,m=2;
        System.out.println( placetiles(n,m));
    }
}



4)number of ways calling guest at party uniquely or in pairs
public class advancerecursionprob {
    public static int countways(int n){

        if(n<=1){
            return 1;
        }

        int singles=countways(n-1);


        int pairs=(n-1)*countways(n-2);

        return singles+pairs;
    }
    public static void main(String[] args){
        int n=4;
        System.out.println(countways(n));
    }
}





5)print keypad combination
import java.util.*;
public class advancerecursionprob {
    public static void printSubset(ArrayList<Integer> subset){
        for(int i=0;i<subset.size();i++){
            System.out.print(subset.get(i)+" ");
        }
        System.out.println();

    }
    public static void findsubset(int n,ArrayList<Integer> subset){
        if(n==0){
            printSubset(subset);
            return;
        }
        subset.add(n);
        findsubset(n-1,subset);


        subset.remove(subset.size()-1);
        findsubset(n-1,subset);
    }

    public static void main(String[] args){
        int  n=3;
        ArrayList<Integer> subset=new ArrayList<>();
        findsubset(n,subset);
    }
}
